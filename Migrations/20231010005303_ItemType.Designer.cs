// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SIMPOS.Migrations
{
    [DbContext(typeof(SIMPOSDbContext))]
    [Migration("20231010005303_ItemType")]
    partial class ItemType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SIMPOS.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SIMPOS.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Name = "Water",
                            Price = 0m,
                            Type = "Drink"
                        },
                        new
                        {
                            ItemId = 2,
                            Name = "Soda",
                            Price = 3m,
                            Type = "Drink"
                        },
                        new
                        {
                            ItemId = 3,
                            Name = "Iced Tea",
                            Price = 3m,
                            Type = "Drink"
                        },
                        new
                        {
                            ItemId = 4,
                            Name = "Lemonade",
                            Price = 4m,
                            Type = "Drink"
                        },
                        new
                        {
                            ItemId = 5,
                            Name = "8in",
                            Price = 12m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 6,
                            Name = "12in",
                            Price = 14m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 7,
                            Name = "16in",
                            Price = 18m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 8,
                            Name = "Cheese",
                            Price = 0.50m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 9,
                            Name = "Pepperoni",
                            Price = 0.50m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 10,
                            Name = "Sausage",
                            Price = 0.50m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 11,
                            Name = "Bacon",
                            Price = 0.75m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 12,
                            Name = "Mushroom",
                            Price = 0.50m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 13,
                            Name = "Red & Green Peppers",
                            Price = 0.50m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 14,
                            Name = "Banana Pepper",
                            Price = 0.75m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 15,
                            Name = "Onion",
                            Price = 0.50m,
                            Type = "Pizza"
                        },
                        new
                        {
                            ItemId = 16,
                            Name = "8ct",
                            Price = 8m,
                            Type = "Wings"
                        },
                        new
                        {
                            ItemId = 17,
                            Name = "12ct",
                            Price = 12m,
                            Type = "Wings"
                        },
                        new
                        {
                            ItemId = 18,
                            Name = "16ct",
                            Price = 16m,
                            Type = "Wings"
                        },
                        new
                        {
                            ItemId = 19,
                            Name = "Sweet BBQ",
                            Price = 0.50m,
                            Type = "Wings"
                        },
                        new
                        {
                            ItemId = 20,
                            Name = "Mild",
                            Price = 0.50m,
                            Type = "Wings"
                        },
                        new
                        {
                            ItemId = 21,
                            Name = "Medium",
                            Price = 0.50m,
                            Type = "Wings"
                        },
                        new
                        {
                            ItemId = 22,
                            Name = "Hot",
                            Price = 0.50m,
                            Type = "Wings"
                        },
                        new
                        {
                            ItemId = 23,
                            Name = "Spicy Garlic",
                            Price = 0.50m,
                            Type = "Wings"
                        });
                });

            modelBuilder.Entity("SIMPOS.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SIMPOS.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SIMPOS.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SIMPOS.Models.Order", b =>
                {
                    b.HasOne("SIMPOS.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SIMPOS.Models.OrderItem", b =>
                {
                    b.HasOne("SIMPOS.Models.Order", "Order")
                        .WithOne("OrderItem")
                        .HasForeignKey("SIMPOS.Models.OrderItem", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SIMPOS.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SIMPOS.Models.Order", b =>
                {
                    b.Navigation("OrderItem")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
